plugins {
    id 'guru.zoroark.tegral.kotlin-common-conventions'

    id 'com.github.node-gradle.node'

    id 'project-report'
}

configurations {
    generator {
        canBeResolved true
        canBeConsumed false
        attributes {
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.SHADOWED))
        }
    }
}

dependencies {
    implementation libs.exposed.core
    implementation libs.exposed.dao
    implementation libs.exposed.jdbc
    implementation libs.exposed.javatime
    implementation libs.sqlite

    testImplementation project(":tegral-prismakt:tegral-prismakt-generator-tests-support")

    generator project(path: ":tegral-prismakt:tegral-prismakt-generator")
}

sourceSets {
    main {
        kotlin {
            srcDir layout.buildDirectory.dir("prismaGeneratedSrc")
        }
    }
}

tasks.register('prismaGenerate', NpxTask) {
    command = "prisma"
    args = ["generate"]

    inputs.file("prisma/schema.prisma")
    outputs.dir(project.layout.buildDirectory.dir("prismakt-generator"))
    outputs.file(layout.buildDirectory.file("jacoco/generator.exec"))

    dependsOn configurations.jacocoAgent
    dependsOn configurations.generator

    environment = providers.provider {
        // Agent file retrieval based on JacocoAgentJar.getJar from the Gradle JaCoCo plugin
        def jacocoAgentFile = zipTree(configurations.jacocoAgent.singleFile).find { it.name.equals("jacocoagent.jar") }
        def command = "java " +
                "-javaagent:" + jacocoAgentFile + "=destfile=" + layout.buildDirectory.file("jacoco/generator.exec").get().asFile.absolutePath +
                " -jar " + configurations.generator.find { it.name.endsWith(".jar") }
        println("Generated KT command: " + command)
        return ["PRISMAKT_CMD": command]
    }
}

tasks.register('generatorCodeCoverage', JacocoReport) {
    executionData layout.buildDirectory.file("jacoco/generator.exec")
    sourceSets sourceSets.main

    dependsOn(tasks.prismaGenerate)
}

configurations {
    generatorCodeCoverageOutput {
        canBeConsumed = true
        canBeResolved = false

        extendsFrom configurations.coverageDataElementsForTest

        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.VERIFICATION))
            attribute(VerificationType.VERIFICATION_TYPE_ATTRIBUTE, objects.named(VerificationType, VerificationType.JACOCO_RESULTS))
        }
    }
}

artifacts {
    generatorCodeCoverageOutput(((JacocoReport)tasks.generatorCodeCoverage).getExecutionData().getFiles()) {
        builtBy(prismaGenerate)
    }
}

tasks.compileKotlin.dependsOn prismaGenerate
tasks.compileTestKotlin.dependsOn prismaGenerate

license {
    exclude "prismakt/generated/*.kt"
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}
